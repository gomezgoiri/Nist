#include "MemoryAnalyzer.h"
#include <MemoryRamFree.h>

//4 bytes for each long
int* MemoryAnalyzer::bufMemory = new int[MEM_BUF_SIZE];

int MemoryAnalyzer::freeRam () {
  extern int __heap_start, *__brkval; 
  int v; 
  return (int) &v - (__brkval == 0 ? (int) &__heap_start : (int) __brkval); 
}

int MemoryAnalyzer::freeRam_method2 () {
	return myFreeMemory();
}

void MemoryAnalyzer::storeFreeRam(int position){
	MemoryAnalyzer::bufMemory[position] = myFreeMemory();
}

/**
* The format will be:
* [MEMORY][WHEN][PRF_ALGORITHM][NUM_BIT_OUTPUT][VALUE_FREE_RAM]
* with:
* - MEMORY => is a static string (used to differentiate MemoryAnalyzer from TimingAnalyzer)
* - WHEN => START/END
* - PRF_ALGORITHM => HMAC_SHA1/HMAC_SHA256
* - NUM_BIT_OUTPUT => number of bits of the key generated by KDF
* - VALUE_FREE_RAM => current free ram mesured by "freeRam" function
*/
String MemoryAnalyzer::getSTRcurrentFreeRam(String when, HMAC_type algorithm, size_t numBitOutputKDF, int freeRam) {

	String buf;
	buf += "[MEMORY]";
	buf += "[" + when + "]";

	switch(algorithm){
		case HMAC_SHA1:
    		buf += "[HMAC_SHA1]";
	    break;
	    case HMAC_SHA256:
	    	buf += "[HMAC_SHA256]";
	    break;
	}
	buf += "[" + String(numBitOutputKDF) + "]";
	buf += "[" + String(freeRam) + "]";

	Serial.println(buf);

	return buf;

}

/**
* The OBJECT JSON returned will be as this example:
* { 'typeOfAnalysis' : 'memory',  'when' : 'START',  'algorithm' : 'HMAC_SHA1',  'numBitOutputKDF' : '128',  'freeRam' : '6416' }
* with:
* - typeOfAnalysis => is a static string (used to differentiate MemoryAnalyzer from TimingAnalyzer)
* - when => START/END
* - algorithm => HMAC_SHA1/HMAC_SHA256
* - numBitOutputKDF => number of bits of the key generated by KDF
* - value => current free ram mesured by "freeRam_method2" function
*/
String MemoryAnalyzer::getJSONcurrentFreeRam(String when, HMAC_type algorithm, size_t numBitOutputKDF, int freeRam){

	String buf;
	buf += "{ \"typeOfAnalysis\" : \"memory\", ";
	
	buf += " \"when\" : \"" + when + "\", ";

	switch(algorithm){
		case HMAC_SHA1:
			buf += " \"algorithm\" : \"HMAC_SHA1\", ";
	    break;
	    case HMAC_SHA256:
	    	buf += " \"algorithm\" : \"HMAC_SHA256\", ";
	    break;
	}
	buf += " \"numBitOutputKDF\" : \"" + String(numBitOutputKDF) + "\", ";
	buf += " \"value\" : \"" + String(freeRam) + "\" }";
	
	Serial.println(buf);

	return buf;

}

/**
* 1) 1 = Memory / 0 = Timing
* 2) 1 = Start / 0 = End
* 3) 1 = HMAC_SHA1 / 0 = HMAC_SHA256
* 4) numBitOutputKDF
* 5) freeRam
*/
String MemoryAnalyzer::getBinarycurrentFreeRam(bool when, HMAC_type algorithm, size_t numBitOutputKDF, int freeRam) {

	String buf;
	buf += "1";
	buf += ",";
	buf += String(when);
	buf += ",";
	buf += String(algorithm);
	buf += ",";
	buf += String(numBitOutputKDF);
	buf += ",";
	buf += String(freeRam);

	Serial.println(buf);

	return buf;

}



void MemoryAnalyzer::printBinarycurrentFreeRam(HMAC_type algorithm, size_t numBitOutputKDF){

	String buf;
	buf = "1";
	buf += ",";
	buf += "1";
	buf += ",";
	buf += String(algorithm);
	buf += ",";
	buf += String(numBitOutputKDF);
	buf += ",";
	buf += String(MemoryAnalyzer::bufMemory[1]);

	Serial.println(buf);

	buf = "1";
	buf += ",";
	buf += "0";
	buf += ",";
	buf += String(algorithm);
	buf += ",";
	buf += String(numBitOutputKDF);
	buf += ",";
	buf += String(MemoryAnalyzer::bufMemory[0]);

	Serial.println(buf);

}
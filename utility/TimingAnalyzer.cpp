#include "TimingAnalyzer.h"

//4 bytes for each long
long* TimingAnalyzer::bufTime = new long[TIME_BUF_SIZE];

long TimingAnalyzer::getCurrentTime(){
	return millis();
}

void TimingAnalyzer::storeTime(int position){
	TimingAnalyzer::bufTime[position] = millis();
}

/**
* The format will be:
* [TIMING][WHEN][PRF_ALGORITHM][NUM_BIT_OUTPUT][VALUE_MILLISEC]
* with:
* - TIMING => is a static string (used to differentiate MemoryAnalyzer from TimingAnalyzer)
* - WHEN => START/END
* - PRF_ALGORITHM => HMAC_SHA1/HMAC_SHA256
* - NUM_BIT_OUTPUT => number of bits of the key generated by KDF
* - VALUE_MILLISEC => current millisec. The "mills" function returns the number of milliseconds
* 					  since the Arduino board began running the current program. 
*/
String TimingAnalyzer::getSTRcurrentTime(String when, HMAC_type algorithm, size_t numBitOutputKDF, long mil) {

	String buf;
	buf += "[TIMING]";
	buf += "[" + when + "]";

	switch(algorithm){
		case HMAC_SHA1:
    		buf += "[HMAC_SHA1]";
	    break;
	    case HMAC_SHA256:
	    	buf += "[HMAC_SHA256]";
	    break;
	}
	buf += "[" + String(numBitOutputKDF) + "]";
	buf += "[" + String(mil) + "]";

	Serial.println(buf);

	return buf;

}


/**
* The OBJECT JSON returned will be as this example:
* { 'typeOfAnalysis' : 'timing',  'when' : 'START',  'algorithm' : 'HMAC_SHA1',  'numBitOutputKDF' : '128',  'timing' : '89' }
* with:
* - typeOfAnalysis => is a static string (used to differentiate MemoryAnalyzer from TimingAnalyzer)
* - when => START/END
* - algorithm => HMAC_SHA1/HMAC_SHA256
* - numBitOutputKDF => number of bits of the key generated by KDF
* - value => current millisec. The "mills" function returns the number of milliseconds
* 					  since the Arduino board began running the current program. 
*/
String TimingAnalyzer::getJSONcurrentTime(String when, HMAC_type algorithm, size_t numBitOutputKDF, long mil){

	String buf;
	buf += "{ \"typeOfAnalysis\" : \"timing\", ";
	
	buf += " \"when\" : \"" + when + "\", ";

	switch(algorithm){
		case HMAC_SHA1:
			buf += " \"algorithm\" : \"HMAC_SHA1\", ";
	    break;
	    case HMAC_SHA256:
	    	buf += " \"algorithm\" : \"HMAC_SHA256\", ";
	    break;
	}
	buf += " \"numBitOutputKDF\" : \"" + String(numBitOutputKDF) + "\", ";
	buf += " \"value\" : \"" + String(mil) + "\" }";
	
	Serial.println(buf);

	return buf;

}


/**
* 1) 1 = Memory / 0 = Timing
* 2) 1 = Start / 0 = End
* 3) 1 = HMAC_SHA1 / 0 = HMAC_SHA256
* 4) numBitOutputKDF
* 5) millisecs
*/
String TimingAnalyzer::getBinarycurrentTime(bool when, HMAC_type algorithm, size_t numBitOutputKDF, long mil) {

	String buf;
	buf += "0";
	buf += ",";
	buf += String(when);
	buf += ",";
	buf += String(algorithm);
	buf += ",";
	buf += String(numBitOutputKDF);
	buf += ",";
	buf += String(mil);

	Serial.println(buf);

	return buf;

}

void TimingAnalyzer::printBinarycurrentTime(HMAC_type algorithm, size_t numBitOutputKDF){

	String buf;
	buf = "0";
	buf += ",";
	buf += "1";
	buf += ",";
	buf += String(algorithm);
	buf += ",";
	buf += String(numBitOutputKDF);
	buf += ",";
	buf += String(TimingAnalyzer::bufTime[1]);

	Serial.println(buf);

	buf = "0";
	buf += ",";
	buf += "0";
	buf += ",";
	buf += String(algorithm);
	buf += ",";
	buf += String(numBitOutputKDF);
	buf += ",";
	buf += String(TimingAnalyzer::bufTime[0]);

	Serial.println(buf);

}